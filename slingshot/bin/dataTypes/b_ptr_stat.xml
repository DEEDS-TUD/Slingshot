<?xml version="1.0" encoding="utf-8"?>
<dt>
 <name>
  b_ptr_stat
 </name>
 <parent>
  b_ptr_buf
 </parent>
 <dt_type>
  structStatptr
 </dt_type>
 <dial_groups order="STAT">
  <group name="STAT">
   <dial>
    ZEROS
   </dial>
   <dial>
    NEG1S
   </dial>
   <dial>
    MAX
   </dial>
   <dial>
    FILE_SH
   </dial>
   <dial>
    FILE_PASSWD
   </dial>
   <dial>
    FILE_TEST
   </dial>
  </group>
 </dial_groups>
 <include>
  <block>
   <![CDATA[#define structStatptr struct stat *
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>
#include <errno.h>
#include "b_ptr_buf.h"]]>
  </block>
 </include>
 <defines>
  <block>
   <![CDATA[static struct stat stat_temp;

#define TESTDIR "testdir"
#define TESTFILE        "testdir/testfile_stat"]]>
  </block>
 </defines>
 <access>
  <block dials="ZEROS">
   <![CDATA[stat_temp.st_mode = 0;
    stat_temp.st_ino = 0;
    stat_temp.st_dev = 0;
    stat_temp.st_nlink = 0;
    stat_temp.st_uid = 0;
    stat_temp.st_gid = 0;
    stat_temp.st_size = 0;
    stat_temp.st_atime = 0;
    stat_temp.st_mtime = 0;
    stat_temp.st_ctime = 0;]]>
  </block>
  <block dials="NEG1S">
   <![CDATA[stat_temp.st_mode = -1;
    stat_temp.st_ino = -1;
    stat_temp.st_dev = -1;
    stat_temp.st_nlink = -1;
    stat_temp.st_uid = -1;
    stat_temp.st_gid = -1;
    stat_temp.st_size = -1;
    stat_temp.st_atime = -1;
    stat_temp.st_mtime = -1;
    stat_temp.st_ctime = -1;]]>
  </block>
  <block dials="MAX">
   <![CDATA[stat_temp.st_mode = 2*MAXINT +1;
    stat_temp.st_ino = 2*MAXINT +1;
    stat_temp.st_dev = MAXINT;  
    stat_temp.st_nlink = 2*MAXSHORT +1;
    stat_temp.st_uid = MAXINT;
    stat_temp.st_gid = MAXINT; 
    stat_temp.st_size = MAXLONG; 
    stat_temp.st_atime = MAXINT;
    stat_temp.st_mtime = MAXINT;
    stat_temp.st_ctime = MAXINT;]]>
  </block>
  <block dials="FILE_SH">
   <![CDATA[if((stat("/bin/sh", &stat_temp))!=0)
    {
      perror("stat(\"/bin/sh\")failed ");
    }]]>
  </block>
  <block dials="FILE_PASSWD">
   <![CDATA[if((stat("/etc/passwd", &stat_temp))!=0)
    {
      perror("stat(\"/etc/passwd\") failed");
    }]]>
  </block>
  <block dials="FILE_TEST">
   <![CDATA[int fd;

    // Setup log file for template information

    FILE* logFile = NULL;
    if ((logFile = fopen ("/tmp/templateLog.txt","a+")) == NULL)
    {
      exit(99);
    }

    if (mkdir(TESTDIR,S_IRWXU|S_IRWXG|S_IRWXO)!=0) /* create test directory, u+rwx */
    {
      //if the directory already exists ignore the error
      if (errno != EEXIST) 
      {
         fprintf(logFile,"b_ptr_stat - FILE_TEST mkdir(\"testdir\")failed. Function not tested\n");
         fclose(logFile);
         exit(99);
      }
    }

    //remove the file/directory, ignore error if already removed
    chown(TESTFILE, getuid(), getgid()); //attempt to change ownership
    chmod(TESTFILE, S_IRUSR|S_IWUSR|S_IROTH|S_IWOTH);
    rmdir(TESTFILE);//may be a directory
    remove(TESTFILE);

    fd = open (TESTFILE, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) 
    {
      fprintf (logFile, "b_ptr_stat - FILE_TEST open in stat_createfile\n");
      fclose(logFile);
      exit(99);
    }

    write (fd, "I am a test file.\n", 18);

    if (close (fd)!=0)
    {
      fprintf (logFile, "b_ptr_stat - FILE_TEST close in stat_createfile\n");
      fclose(logFile);
      exit(99);
    }

    if((stat(TESTFILE, &stat_temp))!=0)
    {
      fprintf(logFile, "b_ptr_stat - FILE_TEST stat(TESTFILE failed)\n");
      fclose(logFile);
      exit(99);
    }
    fclose(logFile);]]>
  </block>
  <block>
   <![CDATA[_theVariable = &stat_temp;]]>
  </block>
 </access>
 <commit/>
 <cleanup>
  <block dials="FILE_TEST">
   <![CDATA[remove(TESTFILE);  

    rmdir(TESTDIR);]]>
  </block>
 </cleanup>
</dt>