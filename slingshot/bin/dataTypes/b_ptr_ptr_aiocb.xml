<?xml version="1.0" encoding="utf-8"?>
<dt>
 <name>
  b_ptr_ptr_aiocb
 </name>
 <parent>
  b_ptr_void
 </parent>
 <dt_type>
  structaiocbptrptr
 </dt_type>
 <dial_groups order="FD;OFFSET;BUFFER;NBYTES;REQPRIO;SIGEVENT;OPCODE">
  <group name="BUFFER">
   <dial>
    BUF_NULL
   </dial>
   <dial>
    BUF_FILLED_PAGE
   </dial>
   <dial>
    BUF_ONE_CHAR
   </dial>
   <dial>
    BUF_CONST
   </dial>
  </group>
  <group name="REQPRIO">
   <dial>
    PRI_ZERO
   </dial>
   <dial>
    PRI_ONE
   </dial>
   <dial>
    PRI_NEGONE
   </dial>
   <dial>
    PRI_MAXINT
   </dial>
   <dial>
    PRI_MININT
   </dial>
  </group>
  <group name="SIGEVENT">
   <dial>
    NONE_SIGSEGV
   </dial>
   <dial>
    SIGNAL_SIGSEGV
   </dial>
   <dial>
    ZERO_ZERO
   </dial>
   <dial>
    MAXINT_MAXINT
   </dial>
  </group>
  <group name="FD">
   <dial>
    FD_OPEN_READ
   </dial>
   <dial>
    FD_OPEN_WRITE
   </dial>
   <dial>
    FD_OPEN_APPEND_EMPTY
   </dial>
   <dial>
    FD_OPEN_APPEND_BEGIN
   </dial>
   <dial>
    FD_OPEN_APPEND_EOF
   </dial>
   <dial>
    FD_CLOSED
   </dial>
   <dial>
    FD_DELETED
   </dial>
   <dial>
    FD_ZERO
   </dial>
   <dial>
    FD_NEGONE
   </dial>
   <dial>
    FD_ONE
   </dial>
   <dial>
    FD_MAXINT
   </dial>
   <dial>
    FD_MININT
   </dial>
   <dial>
    FD_READ_ONLY
   </dial>
  </group>
  <group name="NBYTES">
   <dial>
    NBYTE_ZERO
   </dial>
   <dial>
    NBYTE_ONE
   </dial>
   <dial>
    NBYTE_MAXULONG
   </dial>
  </group>
  <group name="OFFSET">
   <dial>
    OFFSET_ZERO
   </dial>
   <dial>
    OFFSET_ONE
   </dial>
   <dial>
    OFFSET_NEGONE
   </dial>
   <dial>
    OFFSET_MAXINT
   </dial>
   <dial>
    OFFSET_MININT
   </dial>
  </group>
  <group name="OPCODE">
   <dial>
    OP_ZERO
   </dial>
   <dial>
    OP_NEGONE
   </dial>
   <dial>
    OP_MAXINT
   </dial>
   <dial>
    OP_READ
   </dial>
   <dial>
    OP_WRITE
   </dial>
  </group>
 </dial_groups>
 <include>
  <block>
   <![CDATA[#include <aio.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <sys/signal.h>
#include "b_ptr_void.h"
#define structaiocbptrptr struct aiocb**
#define TESTDIR "testdir"
#define TESTFILE        "testdir/testfile_aiocb"]]>
  </block>
 </include>
 <defines>
  <block>
   <![CDATA[static struct aiocb* aiocb_ptr = NULL;
  static struct aiocb aiocb_temp;
  static int fd;
  static char* buf_ptr;
  static char* cp_bufPtr;]]>
  </block>
 </defines>
 <access>
  <block>
   <![CDATA[mode_t permissionMode;
   int oflag;

   FILE* logFile = NULL;

   if ((logFile = fopen ("/tmp/templateLog.txt","a+")) == NULL)
   {
     exit(99);
   }  

   if (mkdir(TESTDIR,S_IRWXU|S_IRWXG|S_IRWXO)!=0) /* create test directory, u+rwx */
   {
     //if the directory already exists ignore the error
     if (errno != EEXIST)
     {
       fprintf(logFile,"mkdir failed. Function not tested\n");
       fclose(logFile);
       exit(99);
     }
   }
   //remove the file, ignore error if already removed
   if (unlink (TESTFILE) != 0 )
   {
     if (errno !=  ENOENT)
     {
       fprintf(logFile,"unlink failed. Function not tested\n");
       fclose(logFile);
       exit(99);
     }
   }

   if((fd = open (TESTFILE, O_WRONLY | O_CREAT | O_TRUNC, 0644))==-1)
   {
     fprintf(logFile,"b_ptr_aiocb datatype not setup properly - open failed. Function not tested\n");
     fclose(logFile);
     exit(99);
   }]]>
  </block>
  <block dials="FD_OPEN_APPEND_BEGIN, FD_OPEN_APPEND_EOF, FD_READ_ONLY">
   <![CDATA[write (fd, "I am a test file.\n", 18);]]>
  </block>
  <block>
   <![CDATA[if (close (fd)!=0)
   {
     fprintf(logFile,"b_ptr_aiocb datatype not setup properly - close failed. Function not tested\n");
     fclose(logFile);
     exit(99);
   }
   permissionMode = S_IRWXU | S_IRWXG | S_IRWXO;]]>
  </block>
  <block dials="FD_OPEN_READ, FD_READ_ONLY">
   <![CDATA[oflag = O_RDONLY;]]>
  </block>
  <block dials="FD_OPEN_WRITE">
   <![CDATA[oflag = O_WRONLY | O_CREAT | O_TRUNC;]]>
  </block>
  <block dials="FD_OPEN_APPEND_EMPTY, FD_OPEN_APPEND_BEGIN, FD_OPEN_APPEND_EOF">
   <![CDATA[oflag = O_RDWR | O_CREAT | O_APPEND;]]>
  </block>
  <block dials="FD_READ_ONLY">
   <![CDATA[permissionMode = S_IRUSR;]]>
  </block>
  <block dials="FD_OPEN_READ, FD_OPEN_WRITE, FD_OPEN_APPEND_EMPTY, FD_OPEN_APPEND_BEGIN, FD_OPEN_APPEND_EOF, FD_READ_ONLY">
   <![CDATA[if ((fd  = open(TESTFILE, oflag,  permissionMode)) == -1)
    {
      fprintf(logFile,"b_ptr_aiocb datatype not setup properly - open failed\n");
      fclose(logFile);
      exit (99);
    }
    aiocb_temp.aio_fildes = fd;]]>
  </block>
  <block dials="FD_DELETED">
   <![CDATA[aiocb_temp.aio_fildes = fd;    
    char buffer[128];
    if ((sprintf(buffer, "rm %s", TESTFILE)) <= 0)
    {
      fprintf(logFile,"b_fd datatype not setup properly - rm of the TESTFILE failed. Function not tested\n");
      fclose(logFile);
      exit(99);
    }
    system(buffer);]]>
  </block>
  <block dials="FD_OPEN_APPEND_EOF">
   <![CDATA[int pos;
    if ((pos = lseek(fd, 0L, SEEK_END)) == -1L)
    {
      fprintf(logFile,"b_ptr_aiocb datatype not setup properly - lseek to end of file failed.  Function not tested\n");
      fclose(logFile);
      exit(99);
    }]]>
  </block>
  <block dials="FD_CLOSED">
   <![CDATA[aiocb_temp.aio_fildes = fd;]]>
  </block>
  <block dials="FD_ZERO">
   <![CDATA[aiocb_temp.aio_fildes = 0;]]>
  </block>
  <block dials="FD_NEGONE">
   <![CDATA[aiocb_temp.aio_fildes = -1;]]>
  </block>
  <block dials="FD_ONE">
   <![CDATA[aiocb_temp.aio_fildes = 1;]]>
  </block>
  <block dials="FD_MAXINT">
   <![CDATA[aiocb_temp.aio_fildes = MAXINT;]]>
  </block>
  <block dials="FD_MININT">
   <![CDATA[aiocb_temp.aio_fildes = -MAXINT;]]>
  </block>
  <block dials="OFFSET_ZERO">
   <![CDATA[aiocb_temp.aio_offset = 0;]]>
  </block>
  <block dials="OFFSET_ONE">
   <![CDATA[aiocb_temp.aio_offset = 1;]]>
  </block>
  <block dials="OFFSET_NEGONE">
   <![CDATA[aiocb_temp.aio_offset = -1;]]>
  </block>
  <block dials="OFFSET_MAXINT">
   <![CDATA[aiocb_temp.aio_offset = MAXINT;]]>
  </block>
  <block dials="OFFSET_MININT">
   <![CDATA[aiocb_temp.aio_offset = -MAXINT;]]>
  </block>
  <block dials="BUF_NULL">
   <![CDATA[aiocb_temp.aio_buf = NULL;]]>
  </block>
  <block dials="BUF_FILLED_PAGE">
   <![CDATA[int pagesize = getpagesize();
    cp_bufPtr = buf_ptr = (char*) malloc(pagesize);
    int i;
    for (i = 0; i < (pagesize-1); i++)
    {
      buf_ptr[i] = 'a';
    }
    buf_ptr[pagesize -1] = '\0';

    aiocb_temp.aio_buf = (void*) buf_ptr;]]>
  </block>
  <block dials="BUF_ONE_CHAR">
   <![CDATA[cp_bufPtr = buf_ptr = (char*) malloc(sizeof(char));
    aiocb_temp.aio_buf = (void*) buf_ptr;]]>
  </block>
  <block dials="BUF_CONST">
   <![CDATA[aiocb_temp.aio_buf =  (void*)"                                             ";]]>
  </block>
  <block dials="NBYTE_ZERO">
   <![CDATA[aiocb_temp.aio_nbytes = 0;]]>
  </block>
  <block dials="NBYTE_ONE">
   <![CDATA[aiocb_temp.aio_nbytes = 1;]]>
  </block>
  <block dials="NBYTE_MAXULONG">
   <![CDATA[aiocb_temp.aio_nbytes =  2*MAXLONG + 1;]]>
  </block>
  <block dials="PRI_ZERO">
   <![CDATA[aiocb_temp.aio_reqprio = 0;]]>
  </block>
  <block dials="PRI_ONE">
   <![CDATA[aiocb_temp.aio_reqprio = 1;]]>
  </block>
  <block dials="PRI_NEGONE">
   <![CDATA[aiocb_temp.aio_reqprio = -1;]]>
  </block>
  <block dials="PRI_MAXINT">
   <![CDATA[aiocb_temp.aio_reqprio = MAXINT;]]>
  </block>
  <block dials="PRI_MININT">
   <![CDATA[aiocb_temp.aio_reqprio = -MAXINT;]]>
  </block>
  <block dials="NONE_SIGSEGV">
   <![CDATA[aiocb_temp.aio_sigevent.sigev_notify = SIGEV_NONE;
    aiocb_temp.aio_sigevent.sigev_signo = SIGSEGV;]]>
  </block>
  <block dials="SIGNAL_SIGSEGV">
   <![CDATA[aiocb_temp.aio_sigevent.sigev_notify = SIGEV_SIGNAL;
    aiocb_temp.aio_sigevent.sigev_signo = SIGSEGV;]]>
  </block>
  <block dials="ZERO_ZERO">
   <![CDATA[aiocb_temp.aio_sigevent.sigev_notify = 0;
    aiocb_temp.aio_sigevent.sigev_signo = 0;]]>
  </block>
  <block dials="MAXINT_MAXINT">
   <![CDATA[aiocb_temp.aio_sigevent.sigev_notify = MAXINT;
    aiocb_temp.aio_sigevent.sigev_signo = MAXINT;]]>
  </block>
  <block dials="OP_ZERO">
   <![CDATA[aiocb_temp.aio_lio_opcode = 0;]]>
  </block>
  <block dials="OP_NEGONE">
   <![CDATA[aiocb_temp.aio_lio_opcode = -1;]]>
  </block>
  <block dials="OP_MAXINT">
   <![CDATA[aiocb_temp.aio_lio_opcode = MAXINT;]]>
  </block>
  <block dials="OP_READ">
   <![CDATA[aiocb_temp.aio_lio_opcode = LIO_READ;]]>
  </block>
  <block dials="OP_WRITE">
   <![CDATA[aiocb_temp.aio_lio_opcode = LIO_WRITE;]]>
  </block>
  <block>
   <![CDATA[fclose(logFile);
  aiocb_ptr = &aiocb_temp;
  _theVariable = &aiocb_ptr;]]>
  </block>
 </access>
 <commit/>
 <cleanup>
  <block dials="FD_OPEN_READ, FD_OPEN_WRITE, FD_OPEN_APPEND_EMPTY, FD_OPEN_APPEND_BEGIN, FD_OPEN_APPEND_EOF, FD_READ_ONLY">
   <![CDATA[close(fd);]]>
  </block>
  <block>
   <![CDATA[system("rm -f testdir/testfile_aiocb");
  system("rm -rf testdir");]]>
  </block>
  <block dials="BUF_FILLED_PAGE, BUF_ONE_CHAR">
   <![CDATA[free(cp_bufPtr);]]>
  </block>
 </cleanup>
</dt>